version: 2.1

orbs:
  python: circleci/python@2.0.3
  windows: circleci/windows@5.0.0

update-pip-poetry: &update-pip-poetry |-
  poetry --version
  pip3 install --upgrade pip
  # Note: When changing poetry version, do multi-file find-replace
  pip3 install --upgrade poetry~=1.8.3
  # Don't put more poetry commands here, they'll use the old version for some reason

poetry-cache: &poetry-cache |-
  poetry-cache-{{ arch }}-<< parameters.python-version >>-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

flightgear-fgdata-linux-cache: &flightgear-fgdata-linux-cache |-
  flightgear-fgdata-cache-{{ arch }}-{{ checksum "/tmp/fg-py-integration-test/FlightGear-2020.3.19-data.txz" }}

jobs:
  lint:
    parameters:
      python-version:
        type: string
    executor:
      name: python/default
      tag: << parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Update Pip and Poetry
          command: *update-pip-poetry
      - run:
          name: Poetry show version
          command: poetry --version
      - restore_cache:
          key: *poetry-cache
      - run:
          name: Poetry install
          command: poetry install --no-ansi --no-interaction
      - save_cache:
          key: *poetry-cache
          paths:
            - "/home/circleci/.cache/pypoetry/virtualenvs"
      - run:
          name: Run black
          command: poetry run black --check --no-color flightgear_python/ scripts/ tests/
      - run:
          name: Run flake8
          command: poetry run flake8 --color=never flightgear_python/ scripts/ tests/

  build_install_test:
    parameters:
      python-version:
        type: string
    executor:
      name: python/default
      tag: << parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Update Pip and Poetry
          command: *update-pip-poetry
      - run:
          name: Poetry show version
          command: poetry --version
      - restore_cache:
          key: *poetry-cache
      - run:
          name: Poetry install
          command: poetry install --no-ansi --no-interaction
      - save_cache:
          key: *poetry-cache
          paths:
            - "/home/circleci/.cache/pypoetry/virtualenvs"
      - run:
          name: Poetry build
          command: poetry build --no-ansi --no-interaction
      - run:
          name: Install coverage
          command: pip install -U coverage[toml] coveralls
      - when:
          # Run full testing only on one version, otherwise only run unit tests
          condition:
            equal: [ "3.8", << parameters.python-version >> ]
          steps:
            - run:
                name: Install Integration Test Dependencies
                command: |
                  sudo apt update
                  sudo apt install -y --no-install-recommends \
                  psmisc socat \
                  libx11-xcb1 libgl1 libxcb-xinerama0 libqt5gui5 xvfb dbus-x11
            - run:
                name: Start Xvfb
                command: |
                  Xvfb :1 -screen 0 1280x1024x24 -fbdir /var/tmp &
                  DISPLAY=:1 dbus-launch
            - run:
                name: Pre-download fgdata
                command: |
                  mkdir /tmp/fg-py-integration-test
                  wget --output-document "/tmp/fg-py-integration-test/FlightGear-2020.3.19-data.txz" \
                    'https://netactuate.dl.sourceforge.net/project/flightgear/release-2020.3/FlightGear-2020.3.19-data.txz'
            - restore_cache:
                key: *flightgear-fgdata-linux-cache
            - run:
                name: Integration Tests Script
                command: DISPLAY=:1 scripts/fg_full_integration_test.sh
            - save_cache:
                key: *flightgear-fgdata-linux-cache
                paths:
                  - "/tmp/fg-py-integration-test/fgdata"
            - run:
                name: Coveralls
                command: |
                  # Environment variables are not set when running from a forked PR
                  # coveralls isn't required for PRs anyways
                  if [ -n "$COVERALLS_REPO_TOKEN" ]; then
                    poetry run coverage combine
                    coveralls --verbose
                  else
                    echo "COVERALLS_REPO_TOKEN not set, skipping"
                  fi
            # Store the build files
            - store_artifacts:
                path: dist
            - persist_to_workspace:
                root: .
                paths:
                  - dist
      - when:
          condition:
            # omg wtf circleci. No "else"?
            and:
              - not:
                  equal: [ "3.8", << parameters.python-version >> ]
          steps:
            - run:
                name: Run pytest
                command: poetry run coverage run -m pytest -vv tests/

  # OMG why does windows on circleci suck so much :////
  build_install_test_windows:
    parameters:
      python-version:
        type: string
    executor:
      name: windows/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: Install pyenv-win
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
            choco install pyenv-win --yes
            RefreshEnv
            pyenv install -l
      - run:
          name: Install Python
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv install << parameters.python-version >>
            pyenv global << parameters.python-version >>
            pyenv version
            pyenv exec python -c "import sys; print(sys.executable)"
            pyenv exec python --version
      - run:
          name: Update Pip
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m pip install -U pip
      - run:
          name: Install Poetry
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m pip install -U poetry~=1.8.3
      #      - restore_cache:
      #          key: *poetry-cache
      - run:
          name: Poetry install
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m poetry install --no-ansi --no-interaction
      #      - save_cache:
      #          key: *poetry-cache
      #          paths:
      #            - "C:/Users/circleci/AppData/Local/pypoetry/Cache/virtualenvs"
      - run:
          name: Install coverage
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m pip install -U coverage[toml]
      - run:
          name: Poetry build
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m poetry build --no-ansi --no-interaction
      - run:
          name: Run pytest
          command: |
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"; RefreshEnv
            pyenv exec python -m poetry run coverage run -m pytest -vv tests/

  poetry_publish:
    executor:
      name: python/default
      tag: "3.8"
    steps:
      - checkout
      - run:
          name: Update Pip and Poetry
          command: *update-pip-poetry
      - run:
          name: Poetry show version
          command: poetry --version
      - attach_workspace:
          at: .
      - run:
          name: Poetry publish
          command: poetry publish -vv --no-ansi --no-interaction --username __token__ --password ${FLIGHTGEAR_PYPI_TOKEN}

  github_publish:
    docker:
      - image: cibuilds/github:0.13.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish GitHub release
          command: |
            VERSION=$(echo ./dist/*.whl | cut -d- -f2)
            ghr -token ${GITHUB_PAT} -username ${CIRCLE_PROJECT_USERNAME} -repository ${CIRCLE_PROJECT_REPONAME} -commitish ${CIRCLE_SHA1} -parallel 1 -b "Automatic release ${VERSION}" ${VERSION} ./dist

everything-filter: &everything-filter
  filters:
    tags:
      only: /.*/

tag-filter: &tag-filter
  filters:
    tags:
      only: /^\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

workflows:
  main-workflow:
    jobs:
      - lint:
          matrix:
            parameters:
              python-version: [ "3.8" ]
          <<: *everything-filter # required since `deploy` has tag filters AND requires `build`
      - build_install_test_windows:
          matrix:
            parameters:
              python-version: [ "3.8.10", "3.12.7" ]
          <<: *everything-filter # required since `deploy` has tag filters AND requires `build`
      - build_install_test:
          matrix:
            parameters:
              python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12", "3.13" ]
          <<: *everything-filter # required since `deploy` has tag filters AND requires `build`
      - poetry_publish:
          requires:
            - lint
            - build_install_test
            - build_install_test_windows
          <<: *tag-filter
      - github_publish:
          requires:
            - lint
            - build_install_test
            - build_install_test_windows
          <<: *tag-filter
